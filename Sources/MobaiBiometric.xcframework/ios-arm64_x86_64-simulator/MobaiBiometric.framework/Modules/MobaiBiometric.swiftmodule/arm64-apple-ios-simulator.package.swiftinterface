// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-alias SwiftProtobuf=MBSwiftProtobuf -module-name MobaiBiometric -package-name biometric
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import CoreMedia
import DeveloperToolsSupport
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import Swift
import SwiftUI
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum MBFaceModelEnum {
  case faceBoundingBoxStatus(MobaiBiometric.MBFaceBoundingBoxStatus)
  case faceStatus(MobaiBiometric.MBFaceStatus)
}
public struct MBFaceGeometryModel {
  public let boundingBox: CoreFoundation.CGRect
  public let roll: Swift.Double
  public var pitch: Swift.Double?
  public let yaw: Swift.Double
}
public protocol MBBoundingBoxFaceValidatorDelegate {
  func onValidating(_ faceStatus: Swift.Result<MobaiBiometric.MBFaceGeometryModel, MobaiBiometric.MBFaceBoundingBoxStatus>)
}
public protocol MBCaptureProgressDelegate {
  func onCaptureProgress(captureProgressCounter: Swift.Float)
}
public protocol MBCaptureSessionDelegate {
  func onSuccess(result: MobaiBiometric.MBCaptureSessionResult)
  func onFailure(error: MobaiBiometric.MBCaptureSessionError)
  func onStateChanged(captureState: MobaiBiometric.MBCaptureState)
}
public protocol MBCaptureSessionVCDelegate {
  func onSuccess(result: MobaiBiometric.MBCaptureSessionResult)
  func onFailure(error: MobaiBiometric.MBCaptureSessionError)
  func onStateChanged(stateEnum: MobaiBiometric.MBCaptureState)
  func onPresentedDismissTapped()
}
public protocol MBCountDownDelegate {
  func onCountDown(timeCounter: Swift.Int)
}
public protocol MBOnValidatingDelegate {
  func onValidating(_ faceStatus: MobaiBiometric.MBFaceStatus)
}
extension QuartzCore.CALayer {
  public static func faceMaks(size: CoreFoundation.CGSize, widthRatio: CoreFoundation.CGFloat = 0.8, faceAspectRatio: CoreFoundation.CGFloat = 1.3, verticalPositionRatio: CoreFoundation.CGFloat = 0.1) -> QuartzCore.CALayer
}
extension UIKit.UIColor {
  public static let primaryColor: UIKit.UIColor
  public static let secondaryColor: UIKit.UIColor
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func fillSuperView()
  @_Concurrency.MainActor @preconcurrency public func anchorTo(top: UIKit.NSLayoutYAxisAnchor? = nil, leading: UIKit.NSLayoutXAxisAnchor? = nil, bottom: UIKit.NSLayoutYAxisAnchor? = nil, trailing: UIKit.NSLayoutXAxisAnchor? = nil, padding: UIKit.UIEdgeInsets = .zero, size: CoreFoundation.CGSize = .zero, centerX: UIKit.NSLayoutXAxisAnchor? = nil, centerXConstant: CoreFoundation.CGFloat? = nil, centerY: UIKit.NSLayoutYAxisAnchor? = nil, centerYConstant: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor @preconcurrency public func anchorToConstraints(top: UIKit.NSLayoutYAxisAnchor? = nil, leading: UIKit.NSLayoutXAxisAnchor? = nil, bottom: UIKit.NSLayoutYAxisAnchor? = nil, trailing: UIKit.NSLayoutXAxisAnchor? = nil, padding: UIKit.UIEdgeInsets = .zero, size: CoreFoundation.CGSize = .zero, centerX: UIKit.NSLayoutXAxisAnchor? = nil, centerXConstant: CoreFoundation.CGFloat? = nil, centerY: UIKit.NSLayoutYAxisAnchor? = nil, centerYConstant: CoreFoundation.CGFloat? = nil) -> [UIKit.NSLayoutConstraint]
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func presentAlertWithTitle(title: Swift.String, message: Swift.String, options: Swift.String..., completion: @escaping (Swift.Int) -> Swift.Void)
}
public struct MBCameraOptions {
  public var targetResolution: MobaiBiometric.MBTargetResolution
  public var previewScaleType: MobaiBiometric.MBPreviewScaleType
  public var cameraPosition: MobaiBiometric.MBCameraPosition
  public init(targetResolution: MobaiBiometric.MBTargetResolution = .hd1280x720, previewScaleType: MobaiBiometric.MBPreviewScaleType = .fit, cameraPosition: MobaiBiometric.MBCameraPosition = .front)
}
public struct MBCameraPermissionAlert {
  public init(title: Swift.String = "To continue the app need access for settings!", message: Swift.String = "Go to Settings?", settingText: Swift.String = "Settings", cancelText: Swift.String = "Cancel")
  public init(dictionaryOptions: Foundation.NSDictionary)
}
public enum MBCameraPosition : Swift.Int {
  case rear
  case front
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MBCaptureConstraints : Swift.Int {
  case v1
  case v2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MBCaptureSessionOptions {
  public var autoCaptureEnabled: Swift.Bool
  public var numberOfFrameToCollect: Swift.Int
  public var timeBeforeAutomaticCapture: Swift.Int
  public var isDebugging: Swift.Bool
  public var payloadOptimization: Swift.Bool
  public var cameraQuality: MobaiBiometric.MBCameraOptions
  public var captureConstraints: MobaiBiometric.MBCaptureConstraints
  public init(autoCaptureEnabled: Swift.Bool = true, numberOfFrameToCollect: Swift.Int = 3, timeBeforeAutomaticCapture: Swift.Int = 1, isDebugging: Swift.Bool = false, payloadOptimization: Swift.Bool = false, cameraQuality: MobaiBiometric.MBCameraOptions = .init(), captureConstraints: MobaiBiometric.MBCaptureConstraints = .v1)
  public init(dictionaryOptions: Foundation.NSDictionary)
}
public struct MBFaceStatusTexts {
  public var faceTooFarAway: Swift.String
  public var faceTooFarUp: Swift.String
  public var faceTooFarDown: Swift.String
  public var faceTooFarLeft: Swift.String
  public var faceTooFarRight: Swift.String
  public var faceTooClose: Swift.String
  public var faceNotFound: Swift.String
  public var tooManyFaces: Swift.String
  public var validFace: Swift.String
  public var outsideROI: Swift.String
  public init(faceTooFarAway: Swift.String = "Face too far away", faceTooFarUp: Swift.String = "Face too far up", faceTooFarDown: Swift.String = "Face too far down", faceTooFarLeft: Swift.String = "Face too far left", faceTooFarRight: Swift.String = "Face too far right", faceTooClose: Swift.String = "Face too close", faceNotFound: Swift.String = "Face not found", tooManyFaces: Swift.String = "Too many faces", validFace: Swift.String = "Valid face")
  public init(dictionaryOptions: Foundation.NSDictionary)
}
public enum MBPreviewScaleType : Swift.Int {
  case fill
  case fit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MBTextLocalizations {
  public init(countdownLabelText: Swift.String = "Hold Still", faceStatusTexts: MobaiBiometric.MBFaceStatusTexts = .init(), cameraPermissionAlert: MobaiBiometric.MBCameraPermissionAlert = .init())
}
public struct MBUIOptions {
  public var showProgressBar: Swift.Bool
  public var showFaceStatusLabel: Swift.Bool
  public var showCountdownTimerLabel: Swift.Bool
  public var presentedDismissButtonEnabled: Swift.Bool
  public var shouldShowOverlayFaceView: Swift.Bool
  public var textLocalizations: MobaiBiometric.MBTextLocalizations
  public init(showProgressBar: Swift.Bool = false, showFaceStatusLabel: Swift.Bool = false, showCountdownTimerLabel: Swift.Bool = false, presentedDismissButtonEnabled: Swift.Bool = false, shouldShowOverlayFaceView: Swift.Bool = true, textLocalizations: MobaiBiometric.MBTextLocalizations = .init())
  public init(dictionaryOptions: Foundation.NSDictionary)
}
@objc public enum MBCaptureSessionError : Swift.Int, Swift.Error {
  case cameraUnavailable
  case cannotAddInput
  case cannotAddOutput
  case orientationNotSupported
  case setPreset
  case createCaptureInput
  case somethingWentWrong
  case noFaceDetected
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension MobaiBiometric.MBCaptureSessionError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum MBCaptureSessionStatus : Swift.Equatable {
  case ready
  case readyToCapture
  case processing
  case startedCapturing
  case finishedCapturing
  case resetCapturing
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MobaiBiometric.MBCaptureSessionStatus, b: MobaiBiometric.MBCaptureSessionStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum MBFaceStatus : Swift.Int, Swift.Equatable {
  case tooFarAway
  case tooClose
  case tooFarUp
  case tooFarDown
  case tooFarLeft
  case tooFarRight
  case notFound
  case valid
  case tooMany
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MBFaceBoundingBoxStatus : Swift.Error {
  public var distanceError: MobaiBiometric.MBDistanceError?
  public var positionalError: [MobaiBiometric.MBPositionalError]?
  public var poseError: [MobaiBiometric.MBPoseError]?
  public var isValidStatus: Swift.Bool {
    get
  }
}
public enum MBPoseError {
  case yawExcessiveFaceRotation
  case rollExcessiveFaceRotation
  case pitchExcessiveFaceRotation
  public static func == (a: MobaiBiometric.MBPoseError, b: MobaiBiometric.MBPoseError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MBDistanceError {
  case tooFarAway
  case tooClose
  public static func == (a: MobaiBiometric.MBDistanceError, b: MobaiBiometric.MBDistanceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MBPositionalError {
  case tooFarUp
  case tooFarDown
  case tooFarLeft
  case tooFarRight
  case notFound
  public static func == (a: MobaiBiometric.MBPositionalError, b: MobaiBiometric.MBPositionalError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MBTargetResolution : Swift.Int {
  case qHD960x540
  case hd1280x720
  case hd1920x1080
  case hd4K3840x2160
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class MBCaptureSessionResult : ObjectiveC.NSObject {
  public var faceImage: Foundation.Data
  public var padData: [Foundation.Data]
  public var versionId: Swift.String
  public var framesMetadata: [MobaiBiometric.MBFaceGeometryModel]
  public func serializedData() throws -> Foundation.Data
  public func arrayWithFaceImage() -> [Foundation.Data]
  @objc deinit
}
public enum MBCaptureState {
  case onInitializing
  case validating
  case countdown
  case capturing
  case onProcessing
  case onCaptureFinished
  public static func == (a: MobaiBiometric.MBCaptureState, b: MobaiBiometric.MBCaptureState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class MBCaptureSessionView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var captureSessionDelegate: (any MobaiBiometric.MBCaptureSessionDelegate)?
  @_Concurrency.MainActor @preconcurrency public var countDownDelegate: (any MobaiBiometric.MBCountDownDelegate)?
  @_Concurrency.MainActor @preconcurrency public var validatingDelegate: (any MobaiBiometric.MBOnValidatingDelegate)?
  @_Concurrency.MainActor @preconcurrency public var boundingBoxFaceValidatorDelegate: (any MobaiBiometric.MBBoundingBoxFaceValidatorDelegate)?
  @_Concurrency.MainActor @preconcurrency public var progressDelegate: (any MobaiBiometric.MBCaptureProgressDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(options: MobaiBiometric.MBCaptureSessionOptions)
  @_Concurrency.MainActor @preconcurrency public func takePicture()
  @_Concurrency.MainActor @preconcurrency open func onStartCapturing()
  @_Concurrency.MainActor @preconcurrency public func onUpdate(options: MobaiBiometric.MBCaptureSessionOptions)
  @_Concurrency.MainActor @preconcurrency public func onStopCapturing()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func calculateScalePreview() -> CoreFoundation.CGRect
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class MBCaptureSessionViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var delegate: (any MobaiBiometric.MBCaptureSessionVCDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(with captureSessionOptions: MobaiBiometric.MBCaptureSessionOptions, style: MobaiBiometric.MBUIOptions)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setBindings()
  @_Concurrency.MainActor @preconcurrency public func onUpdate(with captureSessionOptions: MobaiBiometric.MBCaptureSessionOptions, style: MobaiBiometric.MBUIOptions)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension MobaiBiometric.MBCaptureSessionViewController : MobaiBiometric.MBCaptureSessionDelegate, MobaiBiometric.MBOnValidatingDelegate, MobaiBiometric.MBCountDownDelegate, MobaiBiometric.MBCaptureProgressDelegate {
  @_Concurrency.MainActor @preconcurrency public func onPresentedDismissTapped()
  @_Concurrency.MainActor @preconcurrency public func onInitializing()
  @_Concurrency.MainActor @preconcurrency public func onValidating(_ faceStatus: MobaiBiometric.MBFaceStatus)
  @_Concurrency.MainActor @preconcurrency public func onCountDown(timeCounter: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func onCaptureStarted()
  @_Concurrency.MainActor @preconcurrency public func onSuccess(result: MobaiBiometric.MBCaptureSessionResult)
  @_Concurrency.MainActor @preconcurrency public func onFailure(error: MobaiBiometric.MBCaptureSessionError)
  @_Concurrency.MainActor @preconcurrency public func onCaptureProgress(captureProgressCounter: Swift.Float)
  @_Concurrency.MainActor @preconcurrency public func onStateChanged(captureState: MobaiBiometric.MBCaptureState)
}
extension MobaiBiometric.MBCaptureSessionViewController : MobaiBiometric.MBBoundingBoxFaceValidatorDelegate {
  @_Concurrency.MainActor @preconcurrency public func onValidating(_ faceStatus: Swift.Result<MobaiBiometric.MBFaceGeometryModel, MobaiBiometric.MBFaceBoundingBoxStatus>)
}
extension MobaiBiometric.MBCameraPosition : Swift.Equatable {}
extension MobaiBiometric.MBCameraPosition : Swift.Hashable {}
extension MobaiBiometric.MBCameraPosition : Swift.RawRepresentable {}
extension MobaiBiometric.MBCaptureConstraints : Swift.Equatable {}
extension MobaiBiometric.MBCaptureConstraints : Swift.Hashable {}
extension MobaiBiometric.MBCaptureConstraints : Swift.RawRepresentable {}
extension MobaiBiometric.MBPreviewScaleType : Swift.Equatable {}
extension MobaiBiometric.MBPreviewScaleType : Swift.Hashable {}
extension MobaiBiometric.MBPreviewScaleType : Swift.RawRepresentable {}
extension MobaiBiometric.MBCaptureSessionError : Swift.Equatable {}
extension MobaiBiometric.MBCaptureSessionError : Swift.Hashable {}
extension MobaiBiometric.MBCaptureSessionError : Swift.RawRepresentable {}
extension MobaiBiometric.MBCaptureSessionStatus : Swift.Hashable {}
extension MobaiBiometric.MBFaceStatus : Swift.Hashable {}
extension MobaiBiometric.MBFaceStatus : Swift.RawRepresentable {}
extension MobaiBiometric.MBPoseError : Swift.Equatable {}
extension MobaiBiometric.MBPoseError : Swift.Hashable {}
extension MobaiBiometric.MBDistanceError : Swift.Equatable {}
extension MobaiBiometric.MBDistanceError : Swift.Hashable {}
extension MobaiBiometric.MBPositionalError : Swift.Equatable {}
extension MobaiBiometric.MBPositionalError : Swift.Hashable {}
extension MobaiBiometric.MBTargetResolution : Swift.Equatable {}
extension MobaiBiometric.MBTargetResolution : Swift.Hashable {}
extension MobaiBiometric.MBTargetResolution : Swift.RawRepresentable {}
extension MobaiBiometric.MBCaptureState : Swift.Equatable {}
extension MobaiBiometric.MBCaptureState : Swift.Hashable {}
